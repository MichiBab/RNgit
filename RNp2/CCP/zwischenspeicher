int addrlen = sizeof(serveraddr);
    while (1) {
      
    //clear the socket set
    FD_ZERO(&readfds);
      
    //add master socket to set  
    FD_SET(parentfd, &readfds);
    max_sd = parentfd;
      
      
    //add child sockets to set  
    for (int i = 0 ; i < MAXCLIENTS ; i++){
        //socket descriptor
        sd = client_socket[i];
          
        //if valid socket descriptor then add to read list
        if(sd > 0){
            FD_SET( sd , &readfds);
            }
          
          
        //if valid socket descriptor then add to read list
        if(sd > 0){
            max_sd = sd;
            }
        }
          
    //wait for an activity on one of the sockets , timeout is NULL ,  
    //so wait indefinitely
    activity = select( max_sd + 1 , &readfds , NULL , NULL , NULL);
    if ((activity < 0) && (errno!=EINTR)){
        printf("select error \n");
        }
        
        
    //If something happened on the master socket ,  
    //then its an incoming connection
    if (FD_ISSET(parentfd, &readfds)){
        
        if ((new_socket = accept(parentfd, (struct sockaddr *)&serveraddr, (socklen_t*)&addrlen))<0){
            printf("error accept\n");
            exit(1);
            }
        //add new socket to array of sockets  
        for (int i = 0; i < MAXCLIENTS; i++){   
            //if position is empty  
            if( client_socket[i] == 0 ) {   
                client_socket[i] = new_socket;   
                printf("Adding to list of sockets as %d\n" , i);   
                break;   
                }
            }
        }
        
    
    
    //else its some IO operation on some other socket 
    for (int i = 0; i < MAXCLIENTS; i++){   
        sd = client_socket[i];   
                 
        if (FD_ISSET( sd , &readfds)){   
            //Check if it was for closing , and also read the  
            //incoming message  
            int val;
            if ((val = read( sd , buffer, 1024)) == 0){   
                //Somebody disconnected , get his details and print  
                getpeername(sd , (struct sockaddr*)&serveraddr , \ 
                    (socklen_t*)&addrlen);   
                printf("Host disconnected , ip %s , port %d \n" ,  
                        inet_ntoa(serveraddr.sin_addr) , ntohs(serveraddr.sin_port));   
                        
                    //Close the socket and mark as 0 in list for reuse  
                close( sd );   
                client_socket[i] = 0;   
                }   
                     
                //Read the message that came in and print it out
                else   
                    readFromSocket(client_socket[i]);
                  
            }
        }
    }